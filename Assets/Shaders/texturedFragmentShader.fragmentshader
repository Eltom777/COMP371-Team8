#version 330 core

in vec3 vertexColor;
in vec2 vertexUV;

// Lighting input
// 0 = wood, 1 = cement, 2 = metal
in int textureType;
in vec3 Normal;
in vec3 FragPos;
in vec3 LightPos; // view-space


uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

uniform sampler2D textureSampler;
        
out vec4 FragColor;
void main()
{
    float materialShininess;
    vec3 materialAmbient;
    vec3 materialDiffuse;
    vec3 materialSpecular;

    // Selecting the correct material component
    switch (textureType)
    {
        case 0:
            materialAmbient = vec3(0.0f, 0.0f, 0.0f);
            materialDiffuse = vec3(0.01f, 0.01f, 0.01f);
            materialSpecular = vec3(0.5f, 0.5f, 0.5f);
            materialShininess = 0.06f;
            break;
        case 1:
            materialAmbient = vec3(0.05f, 0.05f, 0.05f);
            materialDiffuse = vec3(0.18f, 0.17f, 0.22f);
            materialSpecular = vec3(0.3f, 0.3f, 0.3f);
            materialShininess = 0.1f;;
            break;
        case 2:
            materialAmbient = vec3(0.25f, 0.25f, 0.25f);
            materialDiffuse = vec3(0.4f, 0.4f, 0.4f);
            materialSpecular = vec3(0.7f, 0.7f, 0.7f);
            materialShininess = 0.6f;;
            break;
        default:
            break;
    }

    vec3 textureColor = texture( textureSampler, vertexUV ).rgb;

    // ambient
	float ambientStrength = 0.1;
	vec3 ambient = materialAmbient * lightColor;

    // diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor * materialDiffuse;

    // specular
	float specularStrength = 0.5;
	//    vec3 viewDir = normalize(viewPos - FragPos); // World space technique, kept for debugging purposes
	vec3 viewDir = normalize(FragPos); // view-space
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), materialShininess);
	vec3 specular = materialSpecular * spec * lightColor;

    vec4 result = (ambient + diffuse + specular) * textureColor;

    FragColor =  result;
};