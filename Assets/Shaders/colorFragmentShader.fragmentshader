#version 330 core
out vec4 FragColor;

in vec3 vertexColor;
in vec3 Normal;
in vec3 FragPos;
// in vec3 LightPos; // view-space

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
	// ambient
	float ambientStrength = 0.6;
	vec3 ambient = ambientStrength * lightColor;

	// diffuse
	vec3 norm = normalize(Normal);
	// vec3 lightDir = normalize(LightPos - FragPos); view-space
	 vec3 lightDir = normalize(lightPos - FragPos); // world-space
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	// specular
	float specularStrength = 0.4;
	    vec3 viewDir = normalize(viewPos - FragPos); // World space technique, kept for debugging purposes
	// vec3 viewDir = normalize(FragPos); // view-space
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 128);
	vec3 specular = specularStrength * spec * lightColor;

	vec3 result = (ambient + diffuse + specular) * objectColor;
	FragColor = vec4(result, 1.0);

	// FragColor = vec4(vertexColor.r, vertexColor.g, vertexColor.b, 1.0f);
};