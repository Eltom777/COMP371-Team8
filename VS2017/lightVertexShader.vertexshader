#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

uniform vec3 lightPos; // view-space
uniform mat4 worldMatrix = mat4(1.0);
uniform mat4 viewMatrix = mat4(1.0); // default value for view matrix (identity)
uniform mat4 projectionMatrix = mat4(1.0);

//out vec3 vertexColor;
out vec3 FragPos;
out vec3 Normal;
out vec3 LightPos; // added for view space test

void main()
{
//   vertexColor = aColor;
   mat4 modelViewProjection = projectionMatrix * viewMatrix * worldMatrix;
   FragPos = vec3(modelViewProjection * vec4(aPos, 1.0));
//   Normal = mat3(transpose(inverse(worldMatrix))) * aNormal; // World space technique, kept for debugging purposes
   Normal = mat3(transpose(inverse(viewMatrix * worldMatrix))) * aNormal;  // view-space
   LightPos = vec3(viewMatrix * vec4(lightPos, 1.0)); // view-space
   gl_Position = modelViewProjection * vec4(aPos.x, aPos.y, aPos.z, 1.0);
}